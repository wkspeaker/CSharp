using System;
using System.IO;
using System.Text.Json;
using System.Threading.Tasks;

namespace LangrisserTools.Core.Services
{
    /// <summary>
    /// 通用数据服务基类
    /// 提供统一的数据加载和保存功能
    /// </summary>
    /// <typeparam name="T">数据类型</typeparam>
    public abstract class DataService<T> where T : class, new()
    {
        protected readonly string ToolName;
        protected readonly DataPathService DataPathService;

        protected DataService(string toolName)
        {
            ToolName = toolName;
            DataPathService = DataPathService.Instance;
        }

        /// <summary>
        /// 获取数据文件路径
        /// </summary>
        /// <param name="fileName">文件名</param>
        /// <returns>数据文件完整路径</returns>
        protected virtual string GetDataFilePath(string fileName)
        {
            return DataPathService.GetDataFilePath(ToolName, fileName);
        }

        /// <summary>
        /// 加载数据
        /// </summary>
        /// <param name="fileName">文件名</param>
        /// <returns>加载的数据对象</returns>
        public virtual async Task<T> LoadDataAsync(string fileName)
        {
            try
            {
                var filePath = GetDataFilePath(fileName);
                if (!File.Exists(filePath))
                {
                    return new T();
                }

                var json = await File.ReadAllTextAsync(filePath);
                return JsonSerializer.Deserialize<T>(json) ?? new T();
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error loading data from {fileName}: {ex.Message}");
                return new T();
            }
        }

        /// <summary>
        /// 保存数据
        /// </summary>
        /// <param name="data">要保存的数据</param>
        /// <param name="fileName">文件名</param>
        public virtual async Task SaveDataAsync(T data, string fileName)
        {
            try
            {
                var filePath = GetDataFilePath(fileName);
                var json = JsonSerializer.Serialize(data, new JsonSerializerOptions { WriteIndented = true });
                await File.WriteAllTextAsync(filePath, json);
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error saving data to {fileName}: {ex.Message}");
                throw;
            }
        }

        /// <summary>
        /// 同步加载数据
        /// </summary>
        /// <param name="fileName">文件名</param>
        /// <returns>加载的数据对象</returns>
        public virtual T LoadData(string fileName)
        {
            try
            {
                var filePath = GetDataFilePath(fileName);
                if (!File.Exists(filePath))
                {
                    return new T();
                }

                var json = File.ReadAllText(filePath);
                return JsonSerializer.Deserialize<T>(json) ?? new T();
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error loading data from {fileName}: {ex.Message}");
                return new T();
            }
        }

        /// <summary>
        /// 同步保存数据
        /// </summary>
        /// <param name="data">要保存的数据</param>
        /// <param name="fileName">文件名</param>
        public virtual void SaveData(T data, string fileName)
        {
            try
            {
                var filePath = GetDataFilePath(fileName);
                var json = JsonSerializer.Serialize(data, new JsonSerializerOptions { WriteIndented = true });
                File.WriteAllText(filePath, json);
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error saving data to {fileName}: {ex.Message}");
                throw;
            }
        }
    }
}

